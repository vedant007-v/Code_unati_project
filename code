# Install required libraries
!pip install requests transformers torch pillow python-dotenv

# Import libraries
import os
from PIL import Image, UnidentifiedImageError
import torch
import requests
from dotenv import load_dotenv
from transformers import Qwen2VLForConditionalGeneration, AutoProcessor
from google.colab import files

# Load environment variables
load_dotenv()

# Initialize APIs
SERPAPI_API_KEY = os.getenv('SERPAPI_API_KEY')

# Load AI model on CPU if GPU memory is insufficient
device = "cuda" if torch.cuda.is_available() else "cpu"
model = None
processor = None

try:
    # Force CPU if GPU memory is insufficient
    if device == "cuda":
        torch.cuda.empty_cache()  # Clear GPU memory
    model = Qwen2VLForConditionalGeneration.from_pretrained(
        "Qwen/Qwen2-VL-2B-Instruct",
        torch_dtype=torch.float16 if device == "cuda" else torch.float32
    ).to(device)
    processor = AutoProcessor.from_pretrained("Qwen/Qwen2-VL-2B-Instruct")
except Exception as e:
    print(f"Model loading error: {e}")




def extract_product_name(image):
    """Extract product name using Qwen-VL model"""
    try:
        # Resize image to reduce memory usage
        image = image.resize((512, 512))

        messages = [{
            "role": "user",
            "content": [
                {"type": "image", "image": image},
                {"type": "text", "text": "Identify the exact product name shown in this image. Reply only with the name."}
            ]
        }]

        text_prompt = processor.apply_chat_template(messages, add_generation_prompt=True)
        inputs = processor(
            text=[text_prompt],
            images=[image],
            return_tensors="pt"
        ).to(device)

        # Generate output with reduced max tokens
        output_ids = model.generate(**inputs, max_new_tokens=50)

        # Decode and clean the response
        full_response = processor.batch_decode(output_ids, skip_special_tokens=True)[0]

        # Extract just the assistant's answer
        if "assistant" in full_response:
            return full_response.split("assistant")[-1].strip()
        return full_response.strip()

    except Exception as e:
        print(f"Extraction error: {e}")
        return None


def search_product_info(product_name):
    """Search product information using SerpAPI"""
    try:
        params = {
            'engine': 'google_shopping',  # Changed to shopping-specific search
            'q': f"{product_name} buy online",  # Added purchase intent keywords
            'api_key': SERPAPI_API_KEY,
            'num': 3,
            'tbm': 'shop',  # Force shopping results
            'gl': 'in',  # Country code (India for Amul)
            'hl': 'en'  # Language
        }
        response = requests.get('https://serpapi.com/search', params=params)
        results = response.json()

        product_info = []
        if 'shopping_results' in results:  # Changed to shopping-specific results
            for result in results['shopping_results'][:3]:
                product_info.append({
                    'title': result.get('title'),
                    'price': result.get('price'),
                    'source': result.get('source'),
                    'link': result.get('link')
                })
        return product_info
    except Exception as e:
        print(f"Search error: {e}")
        return None

# Main function to run in Colab
def main():
    # Upload image
    uploaded = files.upload()
    if not uploaded:
        print("No file uploaded.")
        return

    image_path = next(iter(uploaded))  # Get the first uploaded file

    try:
        # Load image
        image = Image.open(image_path).convert("RGB")
    except UnidentifiedImageError:
        print(f"Error: The file '{image_path}' is not a valid image or is corrupted.")
        print("Please upload a valid image file (e.g., .jpg, .png).")
        return
    except Exception as e:
        print(f"Error loading image: {e}")
        return

    # Step 1: Extract product name
    product_name = extract_product_name(image)
    if not product_name:
        print("Failed to extract product name.")
        return

    print(f"Extracted Product Name: {product_name}")

    # Step 2: Search product information
    product_info = search_product_info(product_name)
    if not product_info:
        print("Failed to retrieve product information.")
        return

    print("\nProduct Information:")
    for info in product_info:
        print(f"Title: {info['title']}")
        print(f"Price: {info.get('price', 'N/A')}")
        print(f"Store: {info.get('store', 'N/A')}")
        print(f"Link: {info['link']}")
        print("-" * 50)



# Run the main function
if __name__ == "__main__":
    main()
